// <auto-generated />
using System;
using GainTrack.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GainTrack.Migrations
{
    [DbContext(typeof(GainTrackContext))]
    [Migration("20241220173517_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("GainTrack.Data.Entities.CardioExercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("Exercise_Id");

                    b.HasKey("ExerciseId");

                    b.ToTable("Cardio_Exercise", (string)null);
                });

            modelBuilder.Entity("GainTrack.Data.Entities.ConcreteExerciseOnTraining", b =>
                {
                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("TrainingHasExerciseId")
                        .HasColumnType("int");

                    b.HasKey("Date", "TrainingHasExerciseId");

                    b.HasIndex("TrainingHasExerciseId");

                    b.ToTable("Concrete_Exercise_on_Training", (string)null);
                });

            modelBuilder.Entity("GainTrack.Data.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<sbyte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<string>("Details")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Exercise", (string)null);
                });

            modelBuilder.Entity("GainTrack.Data.Entities.Messurement", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Meassure")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Name");

                    b.ToTable("Messurements");
                });

            modelBuilder.Entity("GainTrack.Data.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<sbyte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Training", (string)null);
                });

            modelBuilder.Entity("GainTrack.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<sbyte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("Trainer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Trainer");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("GainTrack.Data.Entities.UserHasMessurement", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("MessurementName")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("UserId", "MessurementName", "Date");

                    b.HasIndex("MessurementName");

                    b.ToTable("User_Has_Messurement", (string)null);
                });

            modelBuilder.Entity("GainTrack.Data.Entities.WeightExercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("Exercise_Id");

                    b.HasKey("ExerciseId");

                    b.ToTable("Weight_Exercise", (string)null);
                });

            modelBuilder.Entity("Serie", b =>
                {
                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ConcreteExerciseOnTrainingDate")
                        .HasColumnType("date");

                    b.Property<int>("ConcreteExerciseOnTrainingTrainingHasExerciseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("Reps")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("Time")
                        .HasColumnType("time(6)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("SerialNumber", "ConcreteExerciseOnTrainingDate", "ConcreteExerciseOnTrainingTrainingHasExerciseId");

                    b.HasIndex("ConcreteExerciseOnTrainingDate", "ConcreteExerciseOnTrainingTrainingHasExerciseId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("TrainingHasExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<sbyte>("Deleted")
                        .HasColumnType("tinyint");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int")
                        .HasColumnName("Exercise_Id");

                    b.Property<int>("NumberOfSeries")
                        .HasColumnType("int")
                        .HasColumnName("Number_Of_Series");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int")
                        .HasColumnName("Training_Id");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Training_has_Exercise", (string)null);
                });

            modelBuilder.Entity("GainTrack.Data.Entities.CardioExercise", b =>
                {
                    b.HasOne("GainTrack.Data.Entities.Exercise", "Exercise")
                        .WithOne("CardioExercise")
                        .HasForeignKey("GainTrack.Data.Entities.CardioExercise", "ExerciseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("GainTrack.Data.Entities.ConcreteExerciseOnTraining", b =>
                {
                    b.HasOne("TrainingHasExercise", "TrainingHasExercise")
                        .WithMany("ConcreteExerciseOnTrainings")
                        .HasForeignKey("TrainingHasExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TrainingHasExercise");
                });

            modelBuilder.Entity("GainTrack.Data.Entities.Training", b =>
                {
                    b.HasOne("GainTrack.Data.Entities.User", "User")
                        .WithMany("Training")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GainTrack.Data.Entities.User", b =>
                {
                    b.HasOne("GainTrack.Data.Entities.User", "TrainerNavigation")
                        .WithMany("InverseTrainerNavigation")
                        .HasForeignKey("Trainer")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("TrainerNavigation");
                });

            modelBuilder.Entity("GainTrack.Data.Entities.UserHasMessurement", b =>
                {
                    b.HasOne("GainTrack.Data.Entities.Messurement", "Messurement")
                        .WithMany("UserHasMessurements")
                        .HasForeignKey("MessurementName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GainTrack.Data.Entities.User", "User")
                        .WithMany("UserHasMessurements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Messurement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GainTrack.Data.Entities.WeightExercise", b =>
                {
                    b.HasOne("GainTrack.Data.Entities.Exercise", "Exercise")
                        .WithOne("WeightExercise")
                        .HasForeignKey("GainTrack.Data.Entities.WeightExercise", "ExerciseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("Serie", b =>
                {
                    b.HasOne("GainTrack.Data.Entities.ConcreteExerciseOnTraining", "ConcreteExerciseOnTraining")
                        .WithMany("Series")
                        .HasForeignKey("ConcreteExerciseOnTrainingDate", "ConcreteExerciseOnTrainingTrainingHasExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConcreteExerciseOnTraining");
                });

            modelBuilder.Entity("TrainingHasExercise", b =>
                {
                    b.HasOne("GainTrack.Data.Entities.Exercise", "Exercise")
                        .WithMany("TrainingHasExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GainTrack.Data.Entities.Training", "Training")
                        .WithMany("TrainingHasExercises")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("GainTrack.Data.Entities.ConcreteExerciseOnTraining", b =>
                {
                    b.Navigation("Series");
                });

            modelBuilder.Entity("GainTrack.Data.Entities.Exercise", b =>
                {
                    b.Navigation("CardioExercise");

                    b.Navigation("TrainingHasExercises");

                    b.Navigation("WeightExercise");
                });

            modelBuilder.Entity("GainTrack.Data.Entities.Messurement", b =>
                {
                    b.Navigation("UserHasMessurements");
                });

            modelBuilder.Entity("GainTrack.Data.Entities.Training", b =>
                {
                    b.Navigation("TrainingHasExercises");
                });

            modelBuilder.Entity("GainTrack.Data.Entities.User", b =>
                {
                    b.Navigation("InverseTrainerNavigation");

                    b.Navigation("Training");

                    b.Navigation("UserHasMessurements");
                });

            modelBuilder.Entity("TrainingHasExercise", b =>
                {
                    b.Navigation("ConcreteExerciseOnTrainings");
                });
#pragma warning restore 612, 618
        }
    }
}
